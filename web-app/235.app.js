(self.webpackChunk=self.webpackChunk||[]).push([[235],{583:(e,n,t)=>{"use strict";n.Xt=n.Ky=n.cY=void 0;const _=t(246);let r;n.cY=function(e){r=new _.Renderer(document.getElementById("renderer-wrapper"),e)},n.Ky=function(e){r.update(e)},n.Xt=function(){return r.camera.position.clone().divideScalar(_.Renderer.MASTER_SCALE)}},709:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Component=void 0,n.Component=class{constructor(e){this.scene=e}}},227:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BodyMarker=void 0;const _=t(276),r=t(246),o=t(846);class i{constructor(e,n){this.mesh=o.getBodyMesh(n),e.add(this.mesh);const t=document.createElement("div");t.className="text-light",t.textContent=n.name,this.label=new _.CSS2DObject(t),this.label.position.set(0,0,0),this.mesh.add(this.label)}update(e){this.mesh.position.copy(r.Renderer.simPosToScenePos(e.position))}}n.BodyMarker=i,i.BODY_SCALE=1},846:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getBodyMesh=void 0;const _=t(212),r=t(246),o=t(227),i=new _.MeshBasicMaterial({color:65280}),c=new _.TextureLoader;n.getBodyMesh=function(e){const n=e.name.toLowerCase(),t=s[n];return new _.Mesh((c=e.radius,new _.SphereGeometry(c*r.Renderer.MASTER_SCALE*o.BodyMarker.BODY_SCALE,64,32)),t?t(n):i);var c};const s={mercury:a,venus:a,earth:a,mars:a,jupiter:a,saturn:()=>[a("saturn"),a("saturn_ring",!1,_.DoubleSide)],uranus:a,neptune:a};function a(e,n=!1,t=_.FrontSide){return new _.MeshBasicMaterial({map:c.load(`textures/${e}_color.jpg`),alphaMap:n?c.load(`textures/${e}_alpha.jpg`):null,transparent:n,side:t})}},499:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.BodyMarkersComponent=void 0;const _=t(709),r=t(987),o=t(227);class i extends _.Component{constructor(e,n){super(e),this.markers=n.bodies.map((e=>new o.BodyMarker(this.scene,e)))}update(e){for(const[n,t]of r.zip(this.markers,e.bodies))n.update(t)}}n.BodyMarkersComponent=i},686:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ConnectionMarker=void 0;const _=t(212);class r{constructor(e){this.lineMaterial=new _.LineBasicMaterial({color:r.connectingLineColor.clone()}),this.line=new _.Line(void 0,this.lineMaterial),e.add(this.line),this.sending=0}set points(e){this.line.geometry.setFromPoints(e)}set visible(e){this.line.visible=e}update(){this.sending*=.9,this.lineMaterial.color=r.connectingLineColor.clone().lerp(r.sendingLineColor,this.sending)}}n.ConnectionMarker=r,r.connectingLineColor=new _.Color(255),r.sendingLineColor=new _.Color(65280)},509:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ConnectionMarkersComponent=void 0;const _=t(709),r=t(246),o=t(686);class i extends _.Component{constructor(e,n){super(e),this.markers=[]}update(e){for(const e of this.markers)if(null!=e)for(const n of e)null!=n&&(n.update(),n.visible=!1);for(const[n,t]of e.connectableNodeIndices){const _=this.getMarker(n,t);_.visible=!0,_.points=[r.Renderer.simPosToScenePos(e.nodes[n].position),r.Renderer.simPosToScenePos(e.nodes[t].position)]}for(const[n,t]of e.sendingNodeIndices)this.getMarker(n,t).sending=1}getMarker(e,n){let t=this.markers[e];null==t&&(t=this.markers[e]=[]);let _=t[n];return null==_&&(_=t[n]=new o.ConnectionMarker(this.scene)),_}}n.ConnectionMarkersComponent=i},489:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.NodeMarkersComponent=void 0;const _=t(709),r=t(212),o=t(635),i=t(987);class c extends _.Component{constructor(e,n){super(e),this.markers=i.zip(n.nodes).map((([e,n])=>new o.NodeMarker(this.scene,e)))}update(e){for(const[n,t,_]of i.zip(this.markers,e.nodes,e.messageBufferOccupancies))n.update(t,_),n.occluded=!1,n.highlighted=!1;for(const n of e.creatingNodeIndices)this.markers[n].addSplash(new r.Color("green"));for(const n of e.deliveringNodeIndices)this.markers[n].addSplash(new r.Color("green"),!1);for(const n of e.occludedNodeIndices)this.markers[n].occluded=!0;null!=e.highlightedNodeIndex&&(this.markers[e.highlightedNodeIndex].highlighted=!0)}}n.NodeMarkersComponent=c},635:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.NodeMarker=void 0;const _=t(212),r=t(276),o=t(246),i=t(300);n.NodeMarker=class{constructor(e,n){this.pathPoints=[],this.splashes=[],this.updateIndex=0,this.mesh=new _.Mesh,e.add(this.mesh),this.path=new _.Line(new _.BufferGeometry,new _.LineBasicMaterial({color:16711680})),e.add(this.path),this.labelDiv=document.createElement("div"),this.labelDiv.innerHTML=`\n<div class="col" style="position: relative; width: 100px; height: 1.5em;">\n    <div class="progress w-100 h-100 position-absolute top-0 start-0">\n        <div id="${n.name}-occupancy-bar" class="progress-bar bg-primary" style="z-index: inherit"></div>\n    </div>\n    <div class="w-100 text-center position-absolute top-50 start-50 translate-middle">${n.name}</div>\n</div>\n`,this.label=new r.CSS2DObject(this.labelDiv),this.label.position.set(0,0,0),this.mesh.add(this.label)}addSplash(e,n=!0){this.splashes.push(new i.Splash(this.mesh,e,n))}update(e,n){const t=o.Renderer.simPosToScenePos(e.position);this.mesh.position.copy(t),this.updateIndex%10==0&&(this.pathPoints.push(t),this.pathPoints.length>1e3&&this.pathPoints.shift()),this.path.geometry.setFromPoints(this.pathPoints);for(const e of this.splashes)e.update();this.splashes=this.splashes.filter((e=>e.alive)),null==this.occupancyBar&&(this.occupancyBar=document.getElementById(`${e.name}-occupancy-bar`)),this.occupancyBar.style.width=100*n+"%",this.updateIndex++}set occluded(e){const[n,t]=e?["0.5","progress-bar bg-secondary"]:["1","progress-bar"];this.labelDiv.style.opacity=n,null!=this.occupancyBar&&(this.occupancyBar.className=t)}set highlighted(e){const n=e?"0 0 30px white":"none";this.labelDiv.style.boxShadow=n}}},300:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Splash=void 0;const _=t(276);n.Splash=class{constructor(e,n,t=!0){this.mesh=e,this.color=n,this.expanding=t,this.life=1,this.alive=!0,this.htmlElement=document.createElement("div"),this.htmlElement.style.borderRadius="50%",this.htmlElement.style.borderStyle="solid",this.htmlElement.style.zIndex="1",this.cssObject=new _.CSS2DObject(this.htmlElement),this.updateStyle(),this.mesh.add(this.cssObject)}updateStyle(){this.htmlElement.style.borderColor=`rgba(${255*this.color.r}, ${255*this.color.g}, ${255*this.color.b}, ${2*this.life})`;const e=100*(this.expanding?1-this.life:this.life);this.htmlElement.style.width=e+"px",this.htmlElement.style.height=e+"px",this.htmlElement.style.borderWidth=10*(this.expanding?this.life:1-this.life)+"px"}update(){this.life*=.9,this.updateStyle(),this.life<.01&&(this.alive=!1,this.mesh.remove(this.cssObject))}}},246:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Renderer=void 0;const _=t(212),r=t(886),o=t(276),i=t(489),c=t(509),s=t(499);class a{constructor(e,n){this.sceneRenderer=new _.WebGLRenderer,this.sceneRenderer.setSize(e.clientWidth,e.clientHeight),e.appendChild(this.sceneRenderer.domElement),this.labelRenderer=new o.CSS2DRenderer,this.labelRenderer.setSize(e.clientWidth,e.clientHeight),this.labelRenderer.domElement.style.position="absolute",this.labelRenderer.domElement.style.top="0px",e.appendChild(this.labelRenderer.domElement),this.camera=new _.PerspectiveCamera(75,e.clientWidth/e.clientHeight),this.cameraControls=new r.OrbitControls(this.camera,this.labelRenderer.domElement),this.camera.position.y=50,this.cameraControls.update(),this.scene=new _.Scene,this.scene.add(new _.AxesHelper(1)),this.components=[new i.NodeMarkersComponent(this.scene,n),new c.ConnectionMarkersComponent(this.scene,n),new s.BodyMarkersComponent(this.scene,n)],this.render()}render(){requestAnimationFrame((()=>this.render())),this.sceneRenderer.render(this.scene,this.camera),this.labelRenderer.render(this.scene,this.camera)}update(e){for(const n of this.components)n.update(e)}static simPosToScenePos(e){return new _.Vector3(e.x*a.MASTER_SCALE,e.y*a.MASTER_SCALE,e.z*a.MASTER_SCALE)}}n.Renderer=a,a.MASTER_SCALE=1e5/1496e8},987:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.zip=void 0,n.zip=function(...e){return[...e[0].keys()].map((n=>e.map((e=>e[n]))))}},235:(e,n,t)=>{"use strict";t.a(e,(async e=>{t.r(n),t.d(n,{__wbg_Window_f826a1dec163bacb:()=>r.U8,__wbg_WorkerGlobalScope_967d186155183d38:()=>r.B9,__wbg_addEventListener_49e90ff539b1b667:()=>r.AI,__wbg_appendChild_27974267a42a0def:()=>r.Mn,__wbg_buffer_eb2155f17856c20b:()=>r.Hu,__wbg_call_9698e9b9c4668ae0:()=>r.b1,__wbg_clearInterval_1c51452f493daf1e:()=>r.kb,__wbg_clearInterval_785b6e1184064763:()=>r.L6,__wbg_clientWidth_d8f9a7f844bfbba5:()=>r.rW,__wbg_createElementNS_3be57b8d0c7c13e5:()=>r.rr,__wbg_createElement_1959ce882284e011:()=>r.k_,__wbg_createTextNode_f7bda14307602217:()=>r.c$,__wbg_crypto_98fc271021c7d2ad:()=>r.Oi,__wbg_document_6d5890b86bbf5b96:()=>r.aW,__wbg_error_4bb6c2a97407129a:()=>r.kF,__wbg_files_bd0c448cfede922a:()=>r.h5,__wbg_getAttribute_a950580aa8f3dfc6:()=>r.A8,__wbg_getCameraPosition_a46568126ca56988:()=>r.H_,__wbg_getElementById_f059b7401a23ee7c:()=>r.UD,__wbg_getRandomValues_98117e9a7e993920:()=>r.C2,__wbg_globalThis_787cfd4f25a35141:()=>r.Gg,__wbg_global_af2eb7b1369372ed:()=>r.EL,__wbg_insertBefore_379529a4da6a1947:()=>r.zj,__wbg_instanceof_HtmlButtonElement_c53a8ed80134e375:()=>r.Xr,__wbg_instanceof_HtmlInputElement_a8acc6294a4325d1:()=>r.Cn,__wbg_instanceof_HtmlSelectElement_ae5a047e555dadfa:()=>r.PH,__wbg_instanceof_HtmlTextAreaElement_ea178ae1108bf8ce:()=>r.C6,__wbg_instanceof_Window_b99429ec408dcb8d:()=>r.yv,__wbg_is_744cc9b6515ff95a:()=>r._H,__wbg_lastChild_44be906ccfbaaf0a:()=>r.VB,__wbg_length_0b194abde938d0c6:()=>r.jf,__wbg_log_9864bbce47844bb8:()=>r.I9,__wbg_modulerequire_3440a4bcf44437db:()=>r.dS,__wbg_msCrypto_a2cdb043d2bfe57f:()=>r.gl,__wbg_namespaceURI_089af8a31634d16c:()=>r.Vo,__wbg_new_59cb74e423758ede:()=>r.h9,__wbg_new_ff8b26f7b2d7e2fb:()=>r.Tq,__wbg_new_ffb8fbe0ad5d4d2f:()=>r.fH,__wbg_newnoargs_68424965d85fcb08:()=>r.Kh,__wbg_newwithlength_a49b32b2030b93c3:()=>r.mz,__wbg_nodeName_ebe01173f6d80fef:()=>r.rN,__wbg_node_4b517d861cbcb3bc:()=>r.Im,__wbg_process_2f24d6544ea7b200:()=>r.rY,__wbg_querySelector_753e1037740f7379:()=>r.JM,__wbg_randomFillSync_64cc7d048f228ca8:()=>r.cx,__wbg_removeAttribute_96fc7d7e36217fe8:()=>r.ZH,__wbg_removeChild_73ae1495cb167dcd:()=>r.K5,__wbg_removeEventListener_736c8c70f9ffc4dd:()=>r.DD,__wbg_selectedIndex_01f1e29177bc19fb:()=>r.SP,__wbg_self_3df7c33e222cd53b:()=>r.v6,__wbg_setAttribute_c44888e5d6dd5133:()=>r.EH,__wbg_setInterval_30abc9932fa7c5ba:()=>r.cq,__wbg_setInterval_6cabb60042acd928:()=>r.T9,__wbg_set_67cdd115b9cb141f:()=>r.L9,__wbg_set_c7fc8735d70ceb11:()=>r.iv,__wbg_setchecked_c756ef801f7e9fe2:()=>r.Hs,__wbg_setnodeValue_e010a84aec8acf4e:()=>r.w_,__wbg_settype_791beef0000789d0:()=>r.Br,__wbg_settype_8c7f99d4688c6c4b:()=>r.eo,__wbg_setup_a79ad26b92357792:()=>r.IV,__wbg_setvalue_6671cc5ed4e50ed1:()=>r.Qb,__wbg_setvalue_d846870dad1c9e0a:()=>r.DQ,__wbg_stack_558ba5917b466edd:()=>r.Dz,__wbg_subarray_1bb315d30e0c968c:()=>r.gf,__wbg_tick_bffce5c7df6681d7:()=>r.uD,__wbg_value_45a0a66acf34bf56:()=>r.je,__wbg_value_5ab0a3ac11e49596:()=>r.Es,__wbg_value_f840140562e0314a:()=>r.z6,__wbg_versions_6164651e75405d4a:()=>r.UE,__wbg_window_0f90182e6c405ff2:()=>r.V0,__wbindgen_cb_drop:()=>r.G6,__wbindgen_closure_wrapper988:()=>r.Pe,__wbindgen_closure_wrapper990:()=>r.HU,__wbindgen_debug_string:()=>r.fY,__wbindgen_is_object:()=>r.Wl,__wbindgen_is_string:()=>r.eY,__wbindgen_is_undefined:()=>r.XP,__wbindgen_json_parse:()=>r.t$,__wbindgen_json_serialize:()=>r.r1,__wbindgen_memory:()=>r.oH,__wbindgen_object_clone_ref:()=>r.m_,__wbindgen_object_drop_ref:()=>r.ug,__wbindgen_string_new:()=>r.h4,__wbindgen_throw:()=>r.Or,run_app:()=>r.q8});var _=t(530),r=t(838),o=e([_,r]);[_,r]=o.then?await o:o,_.__wbindgen_start()}))},838:(e,n,t)=>{"use strict";t.a(e,(async _=>{t.d(n,{q8:()=>I,ug:()=>B,uD:()=>A,G6:()=>P,t$:()=>L,r1:()=>O,IV:()=>T,H_:()=>R,m_:()=>D,I9:()=>N,cx:()=>W,C2:()=>z,rY:()=>$,Wl:()=>U,UE:()=>V,Im:()=>q,Oi:()=>F,gl:()=>Y,dS:()=>G,h4:()=>K,XP:()=>X,h9:()=>J,Dz:()=>Q,kF:()=>Z,U8:()=>ee,B9:()=>ne,yv:()=>te,aW:()=>_e,kb:()=>re,T9:()=>oe,k_:()=>ie,rr:()=>ce,c$:()=>se,UD:()=>ae,JM:()=>de,C6:()=>le,z6:()=>be,DQ:()=>ue,Xr:()=>fe,Br:()=>ge,Cn:()=>he,Hs:()=>we,h5:()=>me,eo:()=>pe,je:()=>ve,Qb:()=>ye,AI:()=>Ee,DD:()=>Ce,Vo:()=>Se,rW:()=>Me,A8:()=>ke,ZH:()=>Ie,EH:()=>xe,L6:()=>je,cq:()=>He,rN:()=>Be,VB:()=>Ae,w_:()=>Pe,Mn:()=>Le,zj:()=>Oe,K5:()=>Te,PH:()=>Re,SP:()=>De,Es:()=>Ne,Kh:()=>We,b1:()=>ze,fH:()=>$e,_H:()=>Ue,v6:()=>Ve,V0:()=>qe,Gg:()=>Fe,EL:()=>Ye,Hu:()=>Ge,jf:()=>Ke,Tq:()=>Xe,L9:()=>Je,mz:()=>Qe,gf:()=>Ze,iv:()=>en,eY:()=>nn,fY:()=>tn,Or:()=>_n,oH:()=>rn,Pe:()=>on,HU:()=>cn});var r=t(583),o=t(530);e=t.hmd(e);var i=_([o]);o=(i.then?await i:i)[0];const c=new Array(32).fill(void 0);function s(e){return c[e]}c.push(void 0,null,!0,!1);let a=c.length;function d(e){const n=s(e);return function(e){e<36||(c[e]=a,a=e)}(e),n}let l=new("undefined"==typeof TextDecoder?(0,e.require)("util").TextDecoder:TextDecoder)("utf-8",{ignoreBOM:!0,fatal:!0});l.decode();let b=null;function u(){return null!==b&&b.buffer===o.memory.buffer||(b=new Uint8Array(o.memory.buffer)),b}function f(e,n){return l.decode(u().subarray(e,e+n))}function g(e){a===c.length&&c.push(c.length+1);const n=a;return a=c[n],c[n]=e,n}let h=0,w=new("undefined"==typeof TextEncoder?(0,e.require)("util").TextEncoder:TextEncoder)("utf-8");const m="function"==typeof w.encodeInto?function(e,n){return w.encodeInto(e,n)}:function(e,n){const t=w.encode(e);return n.set(t),{read:e.length,written:t.length}};function p(e,n,t){if(void 0===t){const t=w.encode(e),_=n(t.length);return u().subarray(_,_+t.length).set(t),h=t.length,_}let _=e.length,r=n(_);const o=u();let i=0;for(;i<_;i++){const n=e.charCodeAt(i);if(n>127)break;o[r+i]=n}if(i!==_){0!==i&&(e=e.slice(i)),r=t(r,_,_=i+3*e.length);const n=u().subarray(r+i,r+_);i+=m(e,n).written}return h=i,r}let v=null;function y(){return null!==v&&v.buffer===o.memory.buffer||(v=new Int32Array(o.memory.buffer)),v}function E(e){const n=typeof e;if("number"==n||"boolean"==n||null==e)return`${e}`;if("string"==n)return`"${e}"`;if("symbol"==n){const n=e.description;return null==n?"Symbol":`Symbol(${n})`}if("function"==n){const n=e.name;return"string"==typeof n&&n.length>0?`Function(${n})`:"Function"}if(Array.isArray(e)){const n=e.length;let t="[";n>0&&(t+=E(e[0]));for(let _=1;_<n;_++)t+=", "+E(e[_]);return t+="]",t}const t=/\[object ([^\]]+)\]/.exec(toString.call(e));let _;if(!(t.length>1))return toString.call(e);if(_=t[1],"Object"==_)try{return"Object("+JSON.stringify(e)+")"}catch(e){return"Object"}return e instanceof Error?`${e.name}: ${e.message}\n${e.stack}`:_}function C(e,n,t,_){const r={a:e,b:n,cnt:1,dtor:t},i=(...e)=>{r.cnt++;const n=r.a;r.a=0;try{return _(n,r.b,...e)}finally{0==--r.cnt?o.__wbindgen_export_2.get(r.dtor)(n,r.b):r.a=n}};return i.original=r,i}function S(e,n){o._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h4c5175b9ae18cb80(e,n)}let M=32;function k(e,n,t){try{o._dyn_core__ops__function__FnMut___A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hb85bb7ac09578947(e,n,function(e){if(1==M)throw new Error("out of js stack");return c[--M]=e,M}(t))}finally{c[M++]=void 0}}function I(){o.run_app()}function x(e,n){try{return e.apply(this,n)}catch(e){o.__wbindgen_exn_store(g(e))}}function j(e,n){return u().subarray(e/1,e/1+n)}function H(e){return null==e}function B(e){d(e)}function A(e){(0,r.Ky)(d(e))}function P(e){const n=d(e).original;return 1==n.cnt--&&(n.a=0,!0)}function L(e,n){return g(JSON.parse(f(e,n)))}function O(e,n){const t=s(n);var _=p(JSON.stringify(void 0===t?null:t),o.__wbindgen_malloc,o.__wbindgen_realloc),r=h;y()[e/4+1]=r,y()[e/4+0]=_}function T(e){(0,r.cY)(d(e))}function R(){return g((0,r.Xt)())}function D(e){return g(s(e))}function N(e,n){console.log(f(e,n))}function W(){return x((function(e,n,t){s(e).randomFillSync(j(n,t))}),arguments)}function z(){return x((function(e,n){s(e).getRandomValues(s(n))}),arguments)}function $(e){return g(s(e).process)}function U(e){const n=s(e);return"object"==typeof n&&null!==n}function V(e){return g(s(e).versions)}function q(e){return g(s(e).node)}function F(e){return g(s(e).crypto)}function Y(e){return g(s(e).msCrypto)}function G(){return x((function(e,n){return g(t(805)(f(e,n)))}),arguments)}function K(e,n){return g(f(e,n))}function X(e){return void 0===s(e)}function J(){return g(new Error)}function Q(e,n){var t=p(s(n).stack,o.__wbindgen_malloc,o.__wbindgen_realloc),_=h;y()[e/4+1]=_,y()[e/4+0]=t}function Z(e,n){try{console.error(f(e,n))}finally{o.__wbindgen_free(e,n)}}function ee(e){return g(s(e).Window)}function ne(e){return g(s(e).WorkerGlobalScope)}function te(e){return s(e)instanceof Window}function _e(e){var n=s(e).document;return H(n)?0:g(n)}function re(e,n){s(e).clearInterval(n)}function oe(){return x((function(e,n,t){return s(e).setInterval(s(n),t)}),arguments)}function ie(){return x((function(e,n,t){return g(s(e).createElement(f(n,t)))}),arguments)}function ce(){return x((function(e,n,t,_,r){return g(s(e).createElementNS(0===n?void 0:f(n,t),f(_,r)))}),arguments)}function se(e,n,t){return g(s(e).createTextNode(f(n,t)))}function ae(e,n,t){var _=s(e).getElementById(f(n,t));return H(_)?0:g(_)}function de(){return x((function(e,n,t){var _=s(e).querySelector(f(n,t));return H(_)?0:g(_)}),arguments)}function le(e){return s(e)instanceof HTMLTextAreaElement}function be(e,n){var t=p(s(n).value,o.__wbindgen_malloc,o.__wbindgen_realloc),_=h;y()[e/4+1]=_,y()[e/4+0]=t}function ue(e,n,t){s(e).value=f(n,t)}function fe(e){return s(e)instanceof HTMLButtonElement}function ge(e,n,t){s(e).type=f(n,t)}function he(e){return s(e)instanceof HTMLInputElement}function we(e,n){s(e).checked=0!==n}function me(e){var n=s(e).files;return H(n)?0:g(n)}function pe(e,n,t){s(e).type=f(n,t)}function ve(e,n){var t=p(s(n).value,o.__wbindgen_malloc,o.__wbindgen_realloc),_=h;y()[e/4+1]=_,y()[e/4+0]=t}function ye(e,n,t){s(e).value=f(n,t)}function Ee(){return x((function(e,n,t,_,r){s(e).addEventListener(f(n,t),s(_),s(r))}),arguments)}function Ce(){return x((function(e,n,t,_,r){s(e).removeEventListener(f(n,t),s(_),0!==r)}),arguments)}function Se(e,n){var t=s(n).namespaceURI,_=H(t)?0:p(t,o.__wbindgen_malloc,o.__wbindgen_realloc),r=h;y()[e/4+1]=r,y()[e/4+0]=_}function Me(e){return s(e).clientWidth}function ke(e,n,t,_){var r=s(n).getAttribute(f(t,_)),i=H(r)?0:p(r,o.__wbindgen_malloc,o.__wbindgen_realloc),c=h;y()[e/4+1]=c,y()[e/4+0]=i}function Ie(){return x((function(e,n,t){s(e).removeAttribute(f(n,t))}),arguments)}function xe(){return x((function(e,n,t,_,r){s(e).setAttribute(f(n,t),f(_,r))}),arguments)}function je(e,n){s(e).clearInterval(n)}function He(){return x((function(e,n,t){return s(e).setInterval(s(n),t)}),arguments)}function Be(e,n){var t=p(s(n).nodeName,o.__wbindgen_malloc,o.__wbindgen_realloc),_=h;y()[e/4+1]=_,y()[e/4+0]=t}function Ae(e){var n=s(e).lastChild;return H(n)?0:g(n)}function Pe(e,n,t){s(e).nodeValue=0===n?void 0:f(n,t)}function Le(){return x((function(e,n){return g(s(e).appendChild(s(n)))}),arguments)}function Oe(){return x((function(e,n,t){return g(s(e).insertBefore(s(n),s(t)))}),arguments)}function Te(){return x((function(e,n){return g(s(e).removeChild(s(n)))}),arguments)}function Re(e){return s(e)instanceof HTMLSelectElement}function De(e){return s(e).selectedIndex}function Ne(e,n){var t=p(s(n).value,o.__wbindgen_malloc,o.__wbindgen_realloc),_=h;y()[e/4+1]=_,y()[e/4+0]=t}function We(e,n){return g(new Function(f(e,n)))}function ze(){return x((function(e,n){return g(s(e).call(s(n)))}),arguments)}function $e(){return g(new Object)}function Ue(e,n){return Object.is(s(e),s(n))}function Ve(){return x((function(){return g(self.self)}),arguments)}function qe(){return x((function(){return g(window.window)}),arguments)}function Fe(){return x((function(){return g(globalThis.globalThis)}),arguments)}function Ye(){return x((function(){return g(t.g.global)}),arguments)}function Ge(e){return g(s(e).buffer)}function Ke(e){return s(e).length}function Xe(e){return g(new Uint8Array(s(e)))}function Je(e,n,t){s(e).set(s(n),t>>>0)}function Qe(e){return g(new Uint8Array(e>>>0))}function Ze(e,n,t){return g(s(e).subarray(n>>>0,t>>>0))}function en(){return x((function(e,n,t){return Reflect.set(s(e),s(n),s(t))}),arguments)}function nn(e){return"string"==typeof s(e)}function tn(e,n){var t=p(E(s(n)),o.__wbindgen_malloc,o.__wbindgen_realloc),_=h;y()[e/4+1]=_,y()[e/4+0]=t}function _n(e,n){throw new Error(f(e,n))}function rn(){return g(o.memory)}function on(e,n,t){return g(C(e,n,417,S))}function cn(e,n,t){return g(C(e,n,417,k))}}))},805:e=>{function n(e){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}n.keys=()=>[],n.resolve=n,n.id=805,e.exports=n},530:(e,n,t)=>{"use strict";var _=([_])=>t.v(n,e.id,"321b9857fe1fed178c18",{"./index_bg.js":{__wbindgen_object_drop_ref:_.ug,__wbg_tick_bffce5c7df6681d7:_.uD,__wbindgen_cb_drop:_.G6,__wbindgen_json_parse:_.t$,__wbindgen_json_serialize:_.r1,__wbg_setup_a79ad26b92357792:_.IV,__wbg_getCameraPosition_a46568126ca56988:_.H_,__wbindgen_object_clone_ref:_.m_,__wbg_log_9864bbce47844bb8:_.I9,__wbg_randomFillSync_64cc7d048f228ca8:_.cx,__wbg_getRandomValues_98117e9a7e993920:_.C2,__wbg_process_2f24d6544ea7b200:_.rY,__wbindgen_is_object:_.Wl,__wbg_versions_6164651e75405d4a:_.UE,__wbg_node_4b517d861cbcb3bc:_.Im,__wbg_crypto_98fc271021c7d2ad:_.Oi,__wbg_msCrypto_a2cdb043d2bfe57f:_.gl,__wbg_modulerequire_3440a4bcf44437db:_.dS,__wbindgen_string_new:_.h4,__wbindgen_is_undefined:_.XP,__wbg_new_59cb74e423758ede:_.h9,__wbg_stack_558ba5917b466edd:_.Dz,__wbg_error_4bb6c2a97407129a:_.kF,__wbg_Window_f826a1dec163bacb:_.U8,__wbg_WorkerGlobalScope_967d186155183d38:_.B9,__wbg_instanceof_Window_b99429ec408dcb8d:_.yv,__wbg_document_6d5890b86bbf5b96:_.aW,__wbg_clearInterval_1c51452f493daf1e:_.kb,__wbg_setInterval_6cabb60042acd928:_.T9,__wbg_createElement_1959ce882284e011:_.k_,__wbg_createElementNS_3be57b8d0c7c13e5:_.rr,__wbg_createTextNode_f7bda14307602217:_.c$,__wbg_getElementById_f059b7401a23ee7c:_.UD,__wbg_querySelector_753e1037740f7379:_.JM,__wbg_instanceof_HtmlTextAreaElement_ea178ae1108bf8ce:_.C6,__wbg_value_f840140562e0314a:_.z6,__wbg_setvalue_d846870dad1c9e0a:_.DQ,__wbg_instanceof_HtmlButtonElement_c53a8ed80134e375:_.Xr,__wbg_settype_791beef0000789d0:_.Br,__wbg_instanceof_HtmlInputElement_a8acc6294a4325d1:_.Cn,__wbg_setchecked_c756ef801f7e9fe2:_.Hs,__wbg_files_bd0c448cfede922a:_.h5,__wbg_settype_8c7f99d4688c6c4b:_.eo,__wbg_value_45a0a66acf34bf56:_.je,__wbg_setvalue_6671cc5ed4e50ed1:_.Qb,__wbg_addEventListener_49e90ff539b1b667:_.AI,__wbg_removeEventListener_736c8c70f9ffc4dd:_.DD,__wbg_namespaceURI_089af8a31634d16c:_.Vo,__wbg_clientWidth_d8f9a7f844bfbba5:_.rW,__wbg_getAttribute_a950580aa8f3dfc6:_.A8,__wbg_removeAttribute_96fc7d7e36217fe8:_.ZH,__wbg_setAttribute_c44888e5d6dd5133:_.EH,__wbg_clearInterval_785b6e1184064763:_.L6,__wbg_setInterval_30abc9932fa7c5ba:_.cq,__wbg_nodeName_ebe01173f6d80fef:_.rN,__wbg_lastChild_44be906ccfbaaf0a:_.VB,__wbg_setnodeValue_e010a84aec8acf4e:_.w_,__wbg_appendChild_27974267a42a0def:_.Mn,__wbg_insertBefore_379529a4da6a1947:_.zj,__wbg_removeChild_73ae1495cb167dcd:_.K5,__wbg_instanceof_HtmlSelectElement_ae5a047e555dadfa:_.PH,__wbg_selectedIndex_01f1e29177bc19fb:_.SP,__wbg_value_5ab0a3ac11e49596:_.Es,__wbg_newnoargs_68424965d85fcb08:_.Kh,__wbg_call_9698e9b9c4668ae0:_.b1,__wbg_new_ffb8fbe0ad5d4d2f:_.fH,__wbg_is_744cc9b6515ff95a:_._H,__wbg_self_3df7c33e222cd53b:_.v6,__wbg_window_0f90182e6c405ff2:_.V0,__wbg_globalThis_787cfd4f25a35141:_.Gg,__wbg_global_af2eb7b1369372ed:_.EL,__wbg_buffer_eb2155f17856c20b:_.Hu,__wbg_length_0b194abde938d0c6:_.jf,__wbg_new_ff8b26f7b2d7e2fb:_.Tq,__wbg_set_67cdd115b9cb141f:_.L9,__wbg_newwithlength_a49b32b2030b93c3:_.mz,__wbg_subarray_1bb315d30e0c968c:_.gf,__wbg_set_c7fc8735d70ceb11:_.iv,__wbindgen_is_string:_.eY,__wbindgen_debug_string:_.fY,__wbindgen_throw:_.Or,__wbindgen_memory:_.oH,__wbindgen_closure_wrapper988:_.Pe,__wbindgen_closure_wrapper990:_.HU}});t.a(e,(e=>{var n=e([t(838)]);return n.then?n.then(_):_(n)}),1)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,